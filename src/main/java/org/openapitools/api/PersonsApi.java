/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Person;
import org.openapitools.model.PersonInput;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-19T13:26:52.449819500+03:00[Europe/Moscow]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "Persons", description = "the Persons API")
public interface PersonsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /persons : Get the list of all persons
     *
     * @return Success - List of persons returned. (status code 200)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "personsGet",
        summary = "Get the list of all persons",
        tags = { "Persons" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success - List of persons returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Person.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = @Content())
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persons",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Person>> personsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"role\" : \"role\", \"name\" : \"name\", \"id\" : 0 }, { \"role\" : \"role\", \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * DELETE /persons/{personId} : Delete a person by ID
     *
     * @param personId ID of the person (required)
     * @return Person successfully deleted. (status code 200)
     *         or Person not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "personsPersonIdDelete",
        summary = "Delete a person by ID",
        tags = { "Persons" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Person successfully deleted."),
            @ApiResponse(responseCode = "404", description = "Person not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/persons/{personId}"
    )
    
    default ResponseEntity<Void> personsPersonIdDelete(
        @Parameter(name = "personId", description = "ID of the person", required = true, in = ParameterIn.PATH) @PathVariable("personId") Integer personId
    ) {
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * POST /persons : Add a new person
     *
     * @param personInput  (required)
     * @return Person successfully added. (status code 201)
     *         or Invalid input. (status code 400)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "personsPost",
        summary = "Add a new person",
        tags = { "Persons" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Person successfully added."),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/persons",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> personsPost(
        @Parameter(name = "PersonInput", description = "", required = true) @Valid @RequestBody PersonInput personInput
    ) {
        return new ResponseEntity<>(HttpStatus.CREATED);

    }

}
